import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Mic, Camera, Send, Sparkles, Settings, Heart } from 'lucide-react';

const AICharacterEngine = () => {
  const [character, setCharacter] = useState(null);
  const [currentEmotion, setCurrentEmotion] = useState('neutral');
  const [isListening, setIsListening] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [isGeneratingCharacter, setIsGeneratingCharacter] = useState(false);
  const [characterConfig, setCharacterConfig] = useState({
    style: 'anime',
    personality: 'friendly',
    hairColor: 'brown',
    eyeColor: 'blue'
  });

  const canvasRef = useRef(null);
  const animationRef = useRef(null);
  const characterDataRef = useRef(null);

  // 감정별 표정 변화 매핑
  const emotionMapping = {
    neutral: { eyeScale: 1.0, mouthCurve: 0, blushAlpha: 0, eyebrowAngle: 0 },
    happy: { eyeScale: 0.8, mouthCurve: 0.3, blushAlpha: 0.2, eyebrowAngle: 0.1 },
    sad: { eyeScale: 1.2, mouthCurve: -0.2, blushAlpha: 0, eyebrowAngle: -0.2 },
    surprised: { eyeScale: 1.4, mouthCurve: 0.1, blushAlpha: 0.1, eyebrowAngle: 0.3 },
    angry: { eyeScale: 0.7, mouthCurve: -0.3, blushAlpha: 0, eyebrowAngle: -0.4 },
    embarrassed: { eyeScale: 0.9, mouthCurve: 0.1, blushAlpha: 0.6, eyebrowAngle: 0.1 },
    excited: { eyeScale: 1.1, mouthCurve: 0.4, blushAlpha: 0.3, eyebrowAngle: 0.2 }
  };

  // 캐릭터 애니메이션 엔진
  class CharacterAnimationEngine {
    constructor(canvas) {
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.baseImage = null;
      this.currentTransform = {
        headTilt: 0,
        eyeScale: 1.0,
        mouthCurve: 0,
        blushAlpha: 0,
        eyebrowAngle: 0,
        breathingOffset: 0
      };
      this.animationTime = 0;
      this.isAnimating = true;
    }

    async loadCharacterImage(imageUrl) {
      return new Promise((resolve) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        img.onload = () => {
          this.baseImage = img;
          this.analyzeImageFeatures(img);
          resolve();
        };
        img.src = imageUrl;
      });
    }

    analyzeImageFeatures(image) {
      // 이미지 분석을 통한 얼굴 특징점 추출 (간단한 시뮬레이션)
      const features = {
        faceCenter: { x: this.canvas.width * 0.5, y: this.canvas.height * 0.4 },
        eyeLeft: { x: this.canvas.width * 0.42, y: this.canvas.height * 0.35 },
        eyeRight: { x: this.canvas.width * 0.58, y: this.canvas.height * 0.35 },
        mouth: { x: this.canvas.width * 0.5, y: this.canvas.height * 0.48 },
        leftCheek: { x: this.canvas.width * 0.35, y: this.canvas.height * 0.42 },
        rightCheek: { x: this.canvas.width * 0.65, y: this.canvas.height * 0.42 }
      };
      characterDataRef.current = features;
    }

    updateEmotion(emotion) {
      const targetTransform = emotionMapping[emotion] || emotionMapping.neutral;
      this.animateToTransform(targetTransform);
    }

    animateToTransform(target) {
      const duration = 500; // ms
      const startTime = Date.now();
      const startTransform = { ...this.currentTransform };

      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const easeProgress = this.easeInOutCubic(progress);

        // 부드러운 전환
        Object.keys(target).forEach(key => {
          if (key in startTransform) {
            this.currentTransform[key] = startTransform[key] + 
              (target[key] - startTransform[key]) * easeProgress;
          }
        });

        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };

      animate();
    }

    easeInOutCubic(t) {
      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }

    render() {
      if (!this.baseImage || !this.isAnimating) return;

      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      // 호흡 애니메이션
      this.animationTime += 0.02;
      this.currentTransform.breathingOffset = Math.sin(this.animationTime) * 2;

      // 기본 캐릭터 이미지 그리기
      this.ctx.save();
      
      // 머리 기울기와 호흡 효과
      this.ctx.translate(this.canvas.width / 2, this.canvas.height / 2);
      this.ctx.rotate(this.currentTransform.headTilt);
      this.ctx.translate(0, this.currentTransform.breathingOffset);
      this.ctx.drawImage(
        this.baseImage, 
        -this.baseImage.width / 2, 
        -this.baseImage.height / 2
      );

      this.ctx.restore();

      // 표정 오버레이 그리기
      this.renderExpressionOverlay();
      
      requestAnimationFrame(() => this.render());
    }

    renderExpressionOverlay() {
      if (!characterDataRef.current) return;

      const features = characterDataRef.current;
      
      // 블러시 효과
      if (this.currentTransform.blushAlpha > 0) {
        this.ctx.save();
        this.ctx.globalAlpha = this.currentTransform.blushAlpha;
        this.ctx.fillStyle = '#ffb3ba';
        
        // 양 볼에 블러시
        this.drawBlush(features.leftCheek.x, features.leftCheek.y);
        this.drawBlush(features.rightCheek.x, features.rightCheek.y);
        
        this.ctx.restore();
      }

      // 눈 효과 (확대/축소)
      this.renderEyeEffects(features);
      
      // 입 곡선 효과
      this.renderMouthEffect(features);
    }

    drawBlush(x, y) {
      const gradient = this.ctx.createRadialGradient(x, y, 0, x, y, 20);
      gradient.addColorStop(0, 'rgba(255, 179, 186, 0.6)');
      gradient.addColorStop(1, 'rgba(255, 179, 186, 0)');
      
      this.ctx.fillStyle = gradient;
      this.ctx.beginPath();
      this.ctx.arc(x, y, 20, 0, Math.PI * 2);
      this.ctx.fill();
    }

    renderEyeEffects(features) {
      // 눈 크기 변화 효과 (간단한 시뮬레이션)
      this.ctx.save();
      this.ctx.globalAlpha = 0.3;
      this.ctx.fillStyle = this.currentTransform.eyeScale > 1.1 ? '#fff' : 'rgba(0,0,0,0.2)';
      
      const eyeRadius = Math.abs(this.currentTransform.eyeScale - 1) * 5;
      
      this.ctx.beginPath();
      this.ctx.arc(features.eyeLeft.x, features.eyeLeft.y, eyeRadius, 0, Math.PI * 2);
      this.ctx.fill();
      
      this.ctx.beginPath();
      this.ctx.arc(features.eyeRight.x, features.eyeRight.y, eyeRadius, 0, Math.PI * 2);
      this.ctx.fill();
      
      this.ctx.restore();
    }

    renderMouthEffect(features) {
      if (Math.abs(this.currentTransform.mouthCurve) < 0.1) return;
      
      this.ctx.save();
      this.ctx.strokeStyle = this.currentTransform.mouthCurve > 0 ? '#ff6b9d' : '#4a90e2';
      this.ctx.lineWidth = 2;
      this.ctx.globalAlpha = 0.6;
      
      const curve = this.currentTransform.mouthCurve * 20;
      
      this.ctx.beginPath();
      this.ctx.moveTo(features.mouth.x - 15, features.mouth.y);
      this.ctx.quadraticCurveTo(features.mouth.x, features.mouth.y - curve, features.mouth.x + 15, features.mouth.y);
      this.ctx.stroke();
      
      this.ctx.restore();
    }

    startAnimation() {
      this.isAnimating = true;
      this.render();
    }

    stopAnimation() {
      this.isAnimating = false;
    }
  }

  // 캐릭터 생성 함수
  const generateCharacter = async () => {
    setIsGeneratingCharacter(true);
    try {
      // GPT-4o 이미지 생성 API 호출 시뮬레이션
      const prompt = `anime style character portrait, ${characterConfig.personality} personality, 
        ${characterConfig.hairColor} hair, ${characterConfig.eyeColor} eyes, 
        school uniform, high quality, detailed face, neutral expression`;
      
      // 실제로는 OpenAI DALL-E API를 호출
      // const response = await fetch('/api/generate-character', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ prompt, style: characterConfig.style })
      // });
      
      // 시뮬레이션: 랜덤 애니메이션 캐릭터 이미지
      const sampleImages = [
        'data:image/svg+xml;base64,' + btoa(`
          <svg width="300" height="400" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <radialGradient id="face" cx="50%" cy="40%" r="50%">
                <stop offset="0%" style="stop-color:#ffeaa7"/>
                <stop offset="100%" style="stop-color:#fdcb6e"/>
              </radialGradient>
            </defs>
            <rect width="300" height="400" fill="#f8f9fa"/>
            <ellipse cx="150" cy="160" rx="80" ry="100" fill="url(#face)"/>
            <circle cx="130" cy="140" r="8" fill="#2d3436"/>
            <circle cx="170" cy="140" r="8" fill="#2d3436"/>
            <path d="M 135 180 Q 150 190 165 180" stroke="#e17055" stroke-width="2" fill="none"/>
            <path d="M 100 100 Q 150 80 200 100" stroke="#${characterConfig.hairColor === 'brown' ? '8b4513' : '000'}" stroke-width="20" fill="none"/>
          </svg>
        `)
      ];
      
      setTimeout(() => {
        setCharacter({
          imageUrl: sampleImages[0],
          personality: characterConfig.personality,
          name: '미카'
        });
        setIsGeneratingCharacter(false);
      }, 2000);
      
    } catch (error) {
      console.error('캐릭터 생성 실패:', error);
      setIsGeneratingCharacter(false);
    }
  };

  // 캐릭터 애니메이션 초기화
  useEffect(() => {
    if (character && canvasRef.current) {
      const engine = new CharacterAnimationEngine(canvasRef.current);
      animationRef.current = engine;
      
      engine.loadCharacterImage(character.imageUrl).then(() => {
        engine.startAnimation();
      });

      return () => {
        if (animationRef.current) {
          animationRef.current.stopAnimation();
        }
      };
    }
  }, [character]);

  // 감정 변화 효과
  useEffect(() => {
    if (animationRef.current) {
      animationRef.current.updateEmotion(currentEmotion);
    }
  }, [currentEmotion]);

  // 메시지 전송 처리
  const sendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage = { type: 'user', content: inputText };
    setMessages(prev => [...prev, userMessage]);
    
    // 감정 분석 및 응답 생성 (시뮬레이션)
    const emotions = ['happy', 'excited', 'neutral', 'surprised'];
    const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];
    setCurrentEmotion(randomEmotion);
    
    // AI 응답 시뮬레이션
    setTimeout(() => {
      const responses = [
        '안녕하세요! 오늘 기분이 어떠세요?',
        '그렇군요! 더 자세히 말씀해 주세요.',
        '정말 흥미로운 이야기네요!',
        '저도 그런 생각이에요!'
      ];
      
      const aiMessage = { 
        type: 'ai', 
        content: responses[Math.floor(Math.random() * responses.length)],
        emotion: randomEmotion
      };
      setMessages(prev => [...prev, aiMessage]);
    }, 1000);
    
    setInputText('');
  };

  // 음성 인식 처리
  const toggleListening = () => {
    setIsListening(!isListening);
    if (!isListening) {
      setCurrentEmotion('surprised');
    } else {
      setCurrentEmotion('neutral');
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gradient-to-b from-purple-100 to-blue-100">
      {/* 캐릭터 디스플레이 영역 */}
      <div className="flex-1 relative overflow-hidden">
        {!character ? (
          <div className="flex flex-col items-center justify-center h-full p-6">
            <div className="bg-white rounded-2xl p-8 shadow-lg text-center max-w-sm">
              <Sparkles className="w-16 h-16 mx-auto mb-4 text-purple-500" />
              <h2 className="text-2xl font-bold mb-4">AI 캐릭터 생성</h2>
              <p className="text-gray-600 mb-6">나만의 AI 캐릭터를 만들어보세요!</p>
              
              <div className="space-y-4 mb-6">
                <select
                  value={characterConfig.personality}
                  onChange={(e) => setCharacterConfig(prev => ({...prev, personality: e.target.value}))}
                  className="w-full p-2 border rounded-lg"
                >
                  <option value="friendly">친근한</option>
                  <option value="cheerful">활발한</option>
                  <option value="gentle">차분한</option>
                  <option value="mysterious">신비로운</option>
                </select>
                
                <select
                  value={characterConfig.hairColor}
                  onChange={(e) => setCharacterConfig(prev => ({...prev, hairColor: e.target.value}))}
                  className="w-full p-2 border rounded-lg"
                >
                  <option value="brown">갈색</option>
                  <option value="black">검은색</option>
                  <option value="blonde">금발</option>
                  <option value="pink">분홍색</option>
                </select>
              </div>
              
              <button
                onClick={generateCharacter}
                disabled={isGeneratingCharacter}
                className="w-full bg-purple-500 text-white py-3 rounded-lg font-medium disabled:opacity-50"
              >
                {isGeneratingCharacter ? '생성 중...' : '캐릭터 생성'}
              </button>
            </div>
          </div>
        ) : (
          <div className="relative h-full">
            <canvas
              ref={canvasRef}
              width={400}
              height={500}
              className="absolute inset-0 mx-auto"
              style={{ maxWidth: '100%', height: 'auto' }}
            />
            
            {/* 감정 표시 */}
            <div className="absolute top-4 right-4 bg-white/80 rounded-full px-3 py-1 text-sm">
              😊 {currentEmotion}
            </div>
            
            {/* 캐릭터 정보 */}
            <div className="absolute top-4 left-4 bg-white/80 rounded-lg p-3">
              <div className="flex items-center gap-2">
                <Heart className="w-4 h-4 text-red-500" />
                <span className="font-medium">{character.name}</span>
              </div>
              <div className="text-sm text-gray-600">{character.personality}</div>
            </div>
          </div>
        )}
      </div>

      {/* 채팅 인터페이스 */}
      {character && (
        <div className="bg-white border-t border-gray-200">
          {/* 메시지 리스트 */}
          <div className="max-h-32 overflow-y-auto p-4 space-y-2">
            {messages.map((msg, idx) => (
              <div
                key={idx}
                className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
                    msg.type === 'user'
                      ? 'bg-purple-500 text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  {msg.content}
                </div>
              </div>
            ))}
          </div>

          {/* 입력 인터페이스 */}
          <div className="p-4 border-t border-gray-100">
            <div className="flex items-center gap-2">
              <button
                onClick={toggleListening}
                className={`p-2 rounded-full ${
                  isListening ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-600'
                }`}
              >
                <Mic className="w-5 h-5" />
              </button>
              
              <button
                onClick={() => setCurrentEmotion('surprised')}
                className="p-2 rounded-full bg-gray-200 text-gray-600"
              >
                <Camera className="w-5 h-5" />
              </button>
              
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                placeholder="메시지를 입력하세요..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:border-purple-500"
              />
              
              <button
                onClick={sendMessage}
                className="p-2 rounded-full bg-purple-500 text-white"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* 감정 테스트 버튼들 */}
          <div className="p-4 border-t border-gray-100">
            <div className="flex gap-2 flex-wrap">
              {Object.keys(emotionMapping).map(emotion => (
                <button
                  key={emotion}
                  onClick={() => setCurrentEmotion(emotion)}
                  className={`px-3 py-1 rounded-full text-xs ${
                    currentEmotion === emotion
                      ? 'bg-purple-500 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                >
                  {emotion}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AICharacterEngine;